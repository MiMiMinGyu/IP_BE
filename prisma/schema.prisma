// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  studentId String   @unique @map("student_id")
  name      String
  nickname  String
  password  String
  email     String?  @unique
  createdAt DateTime @default(now()) @map("created_at")

  schedules    PersonalSchedule[]
  Board        Board[]
  comments     Comment[]
  boardLikes   BoardLike[]
  commentLikes CommentLike[]

  @@map("users")
}

model Board {
  id        Int           @id @default(autoincrement())
  title     String
  content   String
  author    User          @relation(fields: [authorId], references: [id])
  authorId  Int           @map("author_id")
  views     Int           @default(0)
  category  BoardCategory @default(GENERAL)
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  deletedAt DateTime?     @map("deleted_at")

  comments Comment[]
  likes    BoardLike[]

  @@map("boards")
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int       @map("author_id")
  board     Board     @relation(fields: [boardId], references: [id])
  boardId   Int       @map("board_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  likes CommentLike[]

  @@map("comments")
}

model BoardLike {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  board     Board    @relation(fields: [boardId], references: [id])
  boardId   Int      @map("board_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([userId, boardId])
  @@map("board_likes")
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId Int      @map("comment_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([userId, commentId])
  @@map("comment_likes")
}

model SchoolSchedule {
  id        Int      @id @default(autoincrement())
  title     String
  date      DateTime
  createdAt DateTime @default(now()) @map("created_at")

  @@map("school_schedules")
}

model PersonalSchedule {
  id        Int      @id @default(autoincrement())
  title     String
  date      DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("personal_schedules")
}

enum BoardCategory {
  GENERAL // 자유
  QUESTION // 질문
  INQUIRY // 문의
  SUGGESTION // 건의
}
