// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement()) // 내부 PK
  studentId String   @unique // 로그인용 학번 (8자리 정수)
  name      String
  nickname  String   @unique
  password  String
  email     String?  @unique
  createdAt DateTime @default(now())

  schedules    PersonalSchedule[]
  Board        Board[]
  comments     Comment[]
  boardLikes   BoardLike[]
  commentLikes CommentLike[]

  @@map("users")
}

model Board {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int
  views     Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  comments Comment[]
  likes    BoardLike[]
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int
  board     Board     @relation(fields: [boardId], references: [id])
  boardId   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  likes CommentLike[]
}

model BoardLike {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  board     Board    @relation(fields: [boardId], references: [id])
  boardId   Int
  createdAt DateTime @default(now())

  @@unique([userId, boardId])
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId Int
  createdAt DateTime @default(now())

  @@unique([userId, commentId])
}

model SchoolSchedule {
  id        Int      @id @default(autoincrement())
  title     String
  date      DateTime
  createdAt DateTime @default(now())
}

model PersonalSchedule {
  id        Int      @id @default(autoincrement())
  title     String
  date      DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
}
