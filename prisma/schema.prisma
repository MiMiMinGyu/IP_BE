// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement()) // 내부 PK
  studentId   String      @unique                      // 로그인용 학번 (8자리 정수)
  name        String
  nickname    String   @unique
  password    String
  email       String?  @unique
  createdAt   DateTime @default(now())

  favoritePlaces FavoritePlace[]
  posts        Post[]
  comments     Comment[]
  schedules    PersonalSchedule[]
}

model Place {
  id          Int      @id @default(autoincrement())
  name        String
  category    String   // ex: "restaurant", "cafe", "park"
  address     String
  description String?  // optional
  latitude    Decimal  @db.Decimal(10, 7)
  longitude   Decimal  @db.Decimal(10, 7)
  menu        String?  // for restaurants/cafes
  priceRange  String?  // ex: "만원 이하"
  rating      Float    @default(0.0)
  createdAt   DateTime @default(now())

  favoritedBy FavoritePlace[]
}

model FavoritePlace {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  place     Place    @relation(fields: [placeId], references: [id])
  placeId   Int
  createdAt DateTime @default(now())
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  comments  Comment[]
  createdAt DateTime @default(now())
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  createdAt DateTime @default(now())
}

model SchoolSchedule {
  id        Int      @id @default(autoincrement())
  title     String
  date      DateTime
  createdAt DateTime @default(now())
}

model PersonalSchedule {
  id        Int      @id @default(autoincrement())
  title     String
  date      DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
}